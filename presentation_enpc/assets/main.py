# This code is generated by copilot
# Create a function that print the sirpinski triangle
# The function takes 3 points and a level
# The level is the number of iteration
# The function returns nothing
import matplotlib.pyplot as plt

def sirpinski(p1, p2, p3, level):
    # If the level is 0, we draw the triangle
    if level == 0:
        # Draw the triangle
        draw_triangle(p1, p2, p3)
    else:
        # Compute the middle points
        p12 = middle_point(p1, p2)
        p23 = middle_point(p2, p3)
        p31 = middle_point(p3, p1)
        # Draw the 3 triangles
        sirpinski(p1, p12, p31, level - 1)
        sirpinski(p12, p2, p23, level - 1)
        sirpinski(p31, p23, p3, level - 1)
    
# Create a function that draw a triangle
# The function takes 3 points
# The function returns nothing
def draw_triangle(p1, p2, p3):
    # Draw the triangle
    draw_line(p1, p2)
    draw_line(p2, p3)
    draw_line(p3, p1)

# Create a function that compute the middle point
# The function takes 2 points
# The function returns the middle point
def middle_point(p1, p2):
    # Compute the middle point
    x = (p1[0] + p2[0]) / 2
    y = (p1[1] + p2[1]) / 2
    return (x, y)

# Create a function that draw a line using matplotlib
# The function takes 2 points
# The function returns nothing
def draw_line(p1, p2):
    # Draw the line
    plt.plot([p1[0], p2[0]], [p1[1], p2[1]], 'k-')

# Create a function that draw the sirpinski triangle
# The function takes 3 points and a level
# The level is the number of iteration
# The function returns nothing
def draw_sirpinski(p1, p2, p3, level):
    # Draw the triangle
    sirpinski(p1, p2, p3, level)
    # Show the result
    # Remove axis and do equal aspect
    plt.axis('equal')
    plt.axis('off')
    plt.show()

# Create a Sirpinski triangle of iteration 3
draw_sirpinski((0, 0), (1, 0), (0.5, 0.866), 3)